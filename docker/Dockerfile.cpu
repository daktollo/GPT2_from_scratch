# Use ARM64-compatible Python 3.9 base image
FROM arm64v8/python:3.9-slim-bullseye

# Set environment variables to avoid interactive prompts and improve I/O
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Install necessary system packages
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    wget \
    git \
    python3-dev \
    libhdf5-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip and setuptools
RUN pip install --upgrade pip setuptools wheel

# Set working directory inside the container
WORKDIR /app

# Copy only requirements.txt first (for better caching)
COPY requirements.txt .

# Install dependencies matching requirements.txt versions for ARM64 compatibility
# Install NumPy first (foundation for everything else)
RUN pip install --no-cache-dir "numpy>=1.20.0"

# Install PyTorch CPU version for ARM64 (use standard index for ARM64)
RUN pip install --no-cache-dir "torch>=2.0.0"

# Install TensorFlow CPU version matching requirements.txt (use tensorflow-cpu for better ARM64 compatibility)
RUN pip install --no-cache-dir "tensorflow-cpu>=2.15.0" || pip install --no-cache-dir "tensorflow>=2.15.0"

# Install all remaining dependencies from requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Verify installations work correctly
RUN python -c "import numpy; print('NumPy version:', numpy.__version__)" && \
    python -c "import tensorflow as tf; print('TensorFlow version:', tf.__version__)" && \
    python -c "import torch; print('PyTorch version:', torch.__version__)"


# Copy the full application code into container
COPY . .

# Create necessary directories
RUN mkdir -p model/gpt2/124M

# Expose the port the server will listen on
EXPOSE 7137

# Health check to monitor app availability
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:7137/ || exit 1

# Start the app
CMD ["python", "run_server.py", "completion"]