# Use ARM64-compatible Python 3.9 base image
FROM arm64v8/python:3.9-slim-bullseye

# Set environment variables to avoid interactive prompts and improve I/O
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Install necessary system packages
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    wget \
    git \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip
RUN pip install --upgrade pip

# Set working directory inside the container
WORKDIR /app

# Copy only requirements.txt first (for better caching)
COPY requirements.txt .

# Remove existing torch/tensorflow entries and prepare CPU-only requirements
RUN echo "# CPU-only base dependencies for ARM64" > requirements.arm64.txt && \
    grep -vE "^torch|^tensorflow" requirements.txt >> requirements.arm64.txt

# Install other Python dependencies
RUN pip install --no-cache-dir -r requirements.arm64.txt

# Install PyTorch for ARM64 (community build) and TensorFlow CPU
RUN pip install torch==2.0.1 && \
    pip install tensorflow==2.11.0

# Copy the full application code into container
COPY . .

# Create necessary directories
RUN mkdir -p model/gpt2/124M

# Expose the port the server will listen on
EXPOSE 7137

# Health check to monitor app availability
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:7137/ || exit 1

# Start the app
CMD ["python", "run_server.py", "completion"]
